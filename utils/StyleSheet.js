'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true,
});
exports.create = exports.compose = exports.applyWidth = void 0;

//******* FILE IS COPIED FROM ../builder/src/utilities/StyleSheet.js ******
//************************* DO NOT EDIT BY HAND ************************
const create = styles => styles; // Like StyleSheet.compose, but concatenates shared keys' values into arrays.

exports.create = create;

const compose = (style1, style2) => {
  const res = { ...style1 };

  for (const [k, v] of Object.entries(style2)) {
    let resV = res[k];

    if (resV === undefined) {
      res[k] = v;
    } else if (Array.isArray(resV) && Array.isArray(v)) {
      res[k] = resV.concat(v);
    } else if (Array.isArray(resV)) {
      res[k] = resV.concat([v]);
    } else if (Array.isArray(v)) {
      res[k] = [resV].concat(v);
    } else {
      res[k] = [resV, v];
    }
  }

  return res;
}; // Given a window width, convert a the style to a StyleSheet style, using values from
// the highest and most recent minWidth for each style key, which fits within the minWidth.

exports.compose = compose;

const applyWidth = (style, width) => {
  const res = {};

  for (const [k, v] of Object.entries(style)) {
    let resV; // If there is an array of values, choose the last one with the largest minWidth
    // which fits in the current screen width

    if (Array.isArray(v)) {
      let maxMinWidth = 0;
      v.forEach(innerV => {
        const minWidth = innerV.minWidth ?? 0;
        const value = innerV.value ?? innerV;

        if (minWidth <= width && minWidth >= maxMinWidth) {
          resV = value;
          maxMinWidth = minWidth;
        }
      }); // Otherwise, check if the value fits in the current screen width
    } else {
      const minWidth = v.minWidth ?? 0;
      const value = v.value ?? v;

      if (minWidth <= width) {
        resV = value;
      }
    }

    if (resV !== undefined) {
      res[k] = resV;
    }
  }

  return res;
};

exports.applyWidth = applyWidth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGUiLCJzdHlsZXMiLCJjb21wb3NlIiwic3R5bGUxIiwic3R5bGUyIiwicmVzIiwiayIsInYiLCJPYmplY3QiLCJlbnRyaWVzIiwicmVzViIsInVuZGVmaW5lZCIsIkFycmF5IiwiaXNBcnJheSIsImNvbmNhdCIsImFwcGx5V2lkdGgiLCJzdHlsZSIsIndpZHRoIiwibWF4TWluV2lkdGgiLCJmb3JFYWNoIiwiaW5uZXJWIiwibWluV2lkdGgiLCJ2YWx1ZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9TdHlsZVNoZWV0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vKioqKioqKiBGSUxFIElTIENPUElFRCBGUk9NIC4uL2J1aWxkZXIvc3JjL3V0aWxpdGllcy9TdHlsZVNoZWV0LmpzICoqKioqKlxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqIERPIE5PVCBFRElUIEJZIEhBTkQgKioqKioqKioqKioqKioqKioqKioqKioqXG5leHBvcnQgY29uc3QgY3JlYXRlID0gc3R5bGVzID0+IHN0eWxlcztcblxuLy8gTGlrZSBTdHlsZVNoZWV0LmNvbXBvc2UsIGJ1dCBjb25jYXRlbmF0ZXMgc2hhcmVkIGtleXMnIHZhbHVlcyBpbnRvIGFycmF5cy5cbmV4cG9ydCBjb25zdCBjb21wb3NlID0gKHN0eWxlMSwgc3R5bGUyKSA9PiB7XG4gIGNvbnN0IHJlcyA9IHsgLi4uc3R5bGUxIH07XG4gIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKHN0eWxlMikpIHtcbiAgICBsZXQgcmVzViA9IHJlc1trXTtcbiAgICBpZiAocmVzViA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXNba10gPSB2O1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXNWKSAmJiBBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICByZXNba10gPSByZXNWLmNvbmNhdCh2KTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVzVikpIHtcbiAgICAgIHJlc1trXSA9IHJlc1YuY29uY2F0KFt2XSk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICByZXNba10gPSBbcmVzVl0uY29uY2F0KHYpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNba10gPSBbcmVzViwgdl07XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG4vLyBHaXZlbiBhIHdpbmRvdyB3aWR0aCwgY29udmVydCBhIHRoZSBzdHlsZSB0byBhIFN0eWxlU2hlZXQgc3R5bGUsIHVzaW5nIHZhbHVlcyBmcm9tXG4vLyB0aGUgaGlnaGVzdCBhbmQgbW9zdCByZWNlbnQgbWluV2lkdGggZm9yIGVhY2ggc3R5bGUga2V5LCB3aGljaCBmaXRzIHdpdGhpbiB0aGUgbWluV2lkdGguXG5leHBvcnQgY29uc3QgYXBwbHlXaWR0aCA9IChzdHlsZSwgd2lkdGgpID0+IHtcbiAgY29uc3QgcmVzID0ge307XG5cbiAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoc3R5bGUpKSB7XG4gICAgbGV0IHJlc1Y7XG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gYXJyYXkgb2YgdmFsdWVzLCBjaG9vc2UgdGhlIGxhc3Qgb25lIHdpdGggdGhlIGxhcmdlc3QgbWluV2lkdGhcbiAgICAvLyB3aGljaCBmaXRzIGluIHRoZSBjdXJyZW50IHNjcmVlbiB3aWR0aFxuICAgIGlmIChBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICBsZXQgbWF4TWluV2lkdGggPSAwO1xuICAgICAgdi5mb3JFYWNoKGlubmVyViA9PiB7XG4gICAgICAgIGNvbnN0IG1pbldpZHRoID0gaW5uZXJWLm1pbldpZHRoID8/IDA7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gaW5uZXJWLnZhbHVlID8/IGlubmVyVjtcbiAgICAgICAgaWYgKG1pbldpZHRoIDw9IHdpZHRoICYmIG1pbldpZHRoID49IG1heE1pbldpZHRoKSB7XG4gICAgICAgICAgcmVzViA9IHZhbHVlO1xuICAgICAgICAgIG1heE1pbldpZHRoID0gbWluV2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gT3RoZXJ3aXNlLCBjaGVjayBpZiB0aGUgdmFsdWUgZml0cyBpbiB0aGUgY3VycmVudCBzY3JlZW4gd2lkdGhcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbWluV2lkdGggPSB2Lm1pbldpZHRoID8/IDA7XG4gICAgICBjb25zdCB2YWx1ZSA9IHYudmFsdWUgPz8gdjtcbiAgICAgIGlmIChtaW5XaWR0aCA8PSB3aWR0aCkge1xuICAgICAgICByZXNWID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChyZXNWICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlc1trXSA9IHJlc1Y7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNPLE1BQU1BLE1BQU0sR0FBR0MsTUFBTSxJQUFJQSxNQUF6QixDLENBRVA7Ozs7O0FBQ08sTUFBTUMsT0FBTyxHQUFHLENBQUNDLE1BQUQsRUFBU0MsTUFBVCxLQUFvQjtFQUN6QyxNQUFNQyxHQUFHLEdBQUcsRUFBRSxHQUFHRjtFQUFMLENBQVo7O0VBQ0EsS0FBSyxNQUFNLENBQUNHLENBQUQsRUFBSUMsQ0FBSixDQUFYLElBQXFCQyxNQUFNLENBQUNDLE9BQVAsQ0FBZUwsTUFBZixDQUFyQixFQUE2QztJQUMzQyxJQUFJTSxJQUFJLEdBQUdMLEdBQUcsQ0FBQ0MsQ0FBRCxDQUFkOztJQUNBLElBQUlJLElBQUksS0FBS0MsU0FBYixFQUF3QjtNQUN0Qk4sR0FBRyxDQUFDQyxDQUFELENBQUgsR0FBU0MsQ0FBVDtJQUNELENBRkQsTUFFTyxJQUFJSyxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsSUFBZCxLQUF1QkUsS0FBSyxDQUFDQyxPQUFOLENBQWNOLENBQWQsQ0FBM0IsRUFBNkM7TUFDbERGLEdBQUcsQ0FBQ0MsQ0FBRCxDQUFILEdBQVNJLElBQUksQ0FBQ0ksTUFBTCxDQUFZUCxDQUFaLENBQVQ7SUFDRCxDQUZNLE1BRUEsSUFBSUssS0FBSyxDQUFDQyxPQUFOLENBQWNILElBQWQsQ0FBSixFQUF5QjtNQUM5QkwsR0FBRyxDQUFDQyxDQUFELENBQUgsR0FBU0ksSUFBSSxDQUFDSSxNQUFMLENBQVksQ0FBQ1AsQ0FBRCxDQUFaLENBQVQ7SUFDRCxDQUZNLE1BRUEsSUFBSUssS0FBSyxDQUFDQyxPQUFOLENBQWNOLENBQWQsQ0FBSixFQUFzQjtNQUMzQkYsR0FBRyxDQUFDQyxDQUFELENBQUgsR0FBUyxDQUFDSSxJQUFELEVBQU9JLE1BQVAsQ0FBY1AsQ0FBZCxDQUFUO0lBQ0QsQ0FGTSxNQUVBO01BQ0xGLEdBQUcsQ0FBQ0MsQ0FBRCxDQUFILEdBQVMsQ0FBQ0ksSUFBRCxFQUFPSCxDQUFQLENBQVQ7SUFDRDtFQUNGOztFQUNELE9BQU9GLEdBQVA7QUFDRCxDQWpCTSxDLENBbUJQO0FBQ0E7Ozs7O0FBQ08sTUFBTVUsVUFBVSxHQUFHLENBQUNDLEtBQUQsRUFBUUMsS0FBUixLQUFrQjtFQUMxQyxNQUFNWixHQUFHLEdBQUcsRUFBWjs7RUFFQSxLQUFLLE1BQU0sQ0FBQ0MsQ0FBRCxFQUFJQyxDQUFKLENBQVgsSUFBcUJDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlTyxLQUFmLENBQXJCLEVBQTRDO0lBQzFDLElBQUlOLElBQUosQ0FEMEMsQ0FFMUM7SUFDQTs7SUFDQSxJQUFJRSxLQUFLLENBQUNDLE9BQU4sQ0FBY04sQ0FBZCxDQUFKLEVBQXNCO01BQ3BCLElBQUlXLFdBQVcsR0FBRyxDQUFsQjtNQUNBWCxDQUFDLENBQUNZLE9BQUYsQ0FBVUMsTUFBTSxJQUFJO1FBQ2xCLE1BQU1DLFFBQVEsR0FBR0QsTUFBTSxDQUFDQyxRQUFQLElBQW1CLENBQXBDO1FBQ0EsTUFBTUMsS0FBSyxHQUFHRixNQUFNLENBQUNFLEtBQVAsSUFBZ0JGLE1BQTlCOztRQUNBLElBQUlDLFFBQVEsSUFBSUosS0FBWixJQUFxQkksUUFBUSxJQUFJSCxXQUFyQyxFQUFrRDtVQUNoRFIsSUFBSSxHQUFHWSxLQUFQO1VBQ0FKLFdBQVcsR0FBR0csUUFBZDtRQUNEO01BQ0YsQ0FQRCxFQUZvQixDQVVwQjtJQUNELENBWEQsTUFXTztNQUNMLE1BQU1BLFFBQVEsR0FBR2QsQ0FBQyxDQUFDYyxRQUFGLElBQWMsQ0FBL0I7TUFDQSxNQUFNQyxLQUFLLEdBQUdmLENBQUMsQ0FBQ2UsS0FBRixJQUFXZixDQUF6Qjs7TUFDQSxJQUFJYyxRQUFRLElBQUlKLEtBQWhCLEVBQXVCO1FBQ3JCUCxJQUFJLEdBQUdZLEtBQVA7TUFDRDtJQUNGOztJQUNELElBQUlaLElBQUksS0FBS0MsU0FBYixFQUF3QjtNQUN0Qk4sR0FBRyxDQUFDQyxDQUFELENBQUgsR0FBU0ksSUFBVDtJQUNEO0VBQ0Y7O0VBQ0QsT0FBT0wsR0FBUDtBQUNELENBOUJNIn0=
